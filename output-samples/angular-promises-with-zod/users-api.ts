// Generated by dtolator --from-openapi simple-sample.json --zod --angular --promises
// Do not modify manually

import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { lastValueFrom } from 'rxjs';
import { map } from 'rxjs/operators';
import { z } from 'zod';
import { fillUrl } from './fill-url';
import {
  ApiResponse,
  ApiResponseSchema,
  CreateUserRequest,
  User,
  UserSchema,
} from './dto';

@Injectable({ providedIn: 'root' })
export class UsersApi {
  constructor(private http: HttpClient) {}

  /**
   * List All Users
   *
   * Retrieve a list of all users in the system
   *
   * @param headers - Optional custom HTTP headers
   * @returns Promise<User[]> - Successful response
   */
  listAllUsers(headers?: HttpHeaders): Promise<User[]> {
    const url = fillUrl('/users', {}, {});
    return lastValueFrom(this.http.get<User[]>(url, { headers })
      .pipe(
        map(response => z.array(UserSchema).parse(response))
      ));
  }

  /**
   * Create New User
   *
   * Create a new user account
   *
   * @param dto - Request body of type CreateUserRequest
   * @param headers - Optional custom HTTP headers
   * @returns Promise<ApiResponse> - User created successfully
   */
  createNewUser(dto: CreateUserRequest, headers?: HttpHeaders): Promise<ApiResponse> {
    const url = fillUrl('/users', {}, {});
    return lastValueFrom(this.http.post<ApiResponse>(url, dto, { headers })
      .pipe(
        map(response => ApiResponseSchema.parse(response))
      ));
  }

  /**
   * Get User By ID
   *
   * Retrieve a specific user by their ID
   *
   * @param userId - Path parameter of type number
   * @param headers - Optional custom HTTP headers
   * @returns Promise<User> - User found
   */
  getUserByID(userId: number, headers?: HttpHeaders): Promise<User> {
    const url = fillUrl('/users/{userId}', { userId: userId }, {});
    return lastValueFrom(this.http.get<User>(url, { headers })
      .pipe(
        map(response => UserSchema.parse(response))
      ));
  }

  /**
   * Update User Profile
   *
   * Update an existing user's information
   *
   * @param userId - Path parameter of type number
   * @param dto - Request body of type CreateUserRequest
   * @param headers - Optional custom HTTP headers
   * @returns Promise<ApiResponse> - User updated successfully
   */
  updateUserProfile(userId: number, dto: CreateUserRequest, headers?: HttpHeaders): Promise<ApiResponse> {
    const url = fillUrl('/users/{userId}', { userId: userId }, {});
    return lastValueFrom(this.http.put<ApiResponse>(url, dto, { headers })
      .pipe(
        map(response => ApiResponseSchema.parse(response))
      ));
  }

  /**
   * Delete User Account
   *
   * Permanently delete a user account
   *
   * @param userId - Path parameter of type number
   * @param headers - Optional custom HTTP headers
   * @returns Promise<ApiResponse> - User deleted successfully
   */
  deleteUserAccount(userId: number, headers?: HttpHeaders): Promise<ApiResponse> {
    const url = fillUrl('/users/{userId}', { userId: userId }, {});
    return lastValueFrom(this.http.delete<ApiResponse>(url, { headers })
      .pipe(
        map(response => ApiResponseSchema.parse(response))
      ));
  }

  /**
   * Activate User Account
   *
   * Activate a user's account status
   *
   * @param userId - Path parameter of type number
   * @param headers - Optional custom HTTP headers
   * @returns Promise<ApiResponse> - User activated successfully
   */
  activateUserAccount(userId: number, headers?: HttpHeaders): Promise<ApiResponse> {
    const url = fillUrl('/users/{userId}/activate', { userId: userId }, {});
    return lastValueFrom(this.http.post<ApiResponse>(url, null, { headers })
      .pipe(
        map(response => ApiResponseSchema.parse(response))
      ));
  }

  /**
   * Deactivate User Account
   *
   * Deactivate a user's account status
   *
   * @param userId - Path parameter of type number
   * @param headers - Optional custom HTTP headers
   * @returns Promise<ApiResponse> - User deactivated successfully
   */
  deactivateUserAccount(userId: number, headers?: HttpHeaders): Promise<ApiResponse> {
    const url = fillUrl('/users/{userId}/deactivate', { userId: userId }, {});
    return lastValueFrom(this.http.post<ApiResponse>(url, null, { headers })
      .pipe(
        map(response => ApiResponseSchema.parse(response))
      ));
  }

}

