// Generated by dtolator --from-openapi simple-sample.json --zod --angular --promises
// Do not modify manually

import { z } from "zod/v4";

export const AddressSchema = z.object({
  street: z.string().min(1).max(100),
  city: z.string().min(1).max(50),
  state: z.string().max(50).nullable().optional(),
  country: z.string().regex(new RegExp("^[A-Z]{2}$")),
  postalCode: z.string().min(3).max(10).nullable().optional()
});

export type Address = z.infer<typeof AddressSchema>;

export const UserProfileSchema = z.object({
  firstName: z.string().min(1).max(50),
  lastName: z.string().min(1).max(50),
  phoneNumber: z.string().regex(new RegExp("^\+?[1-9]\d{1,14}$")).nullable().optional(),
  avatar: z.string().url().nullable().optional(),
  bio: z.string().max(500).nullable().optional()
});

export type UserProfile = z.infer<typeof UserProfileSchema>;

export const CreateUserRequestSchema = z.object({
  email: z.string().email(),
  name: z.string().min(1).max(100),
  age: z.number().min(0).max(150).int().nullable().optional(),
  profile: UserProfileSchema,
  address: AddressSchema.optional()
});

export type CreateUserRequest = z.infer<typeof CreateUserRequestSchema>;

export const UserSchema = z.object({
  id: z.number().int(),
  email: z.string().email(),
  name: z.string().min(1).max(100),
  age: z.number().min(0).max(150).int().optional(),
  isActive: z.boolean().optional(),
  tags: z.array(z.string()).optional(),
  status: z.enum(["active", "inactive", "pending"]).optional(),
  profile: UserProfileSchema.optional(),
  address: AddressSchema.optional()
});

export type User = z.infer<typeof UserSchema>;

export const ApiResponseSchema = z.object({
  success: z.boolean(),
  message: z.string().optional(),
  data: UserSchema.optional()
});

export type ApiResponse = z.infer<typeof ApiResponseSchema>;

