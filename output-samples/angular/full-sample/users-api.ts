// Generated by dtolator --from-openapi full-sample.json --zod --angular
// Do not modify manually

import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { z } from 'zod';
import { fillUrl } from './fill-url';
import {
  AllUsersWithPaginationQueryParams,
  CreateUserRequest,
  User,
  UserSchema,
  UserListResponse,
  UserListResponseSchema,
} from './dto';

@Injectable({ providedIn: 'root' })
export class UsersApi {
  constructor(private http: HttpClient) {}

  /**
   * Get All Users With Pagination
   *
   * Retrieve a paginated list of users
   *
   * @param queryParams - Query parameters object
   * @param queryParams.page - optional parameter of type number
   * @param queryParams.limit - optional parameter of type number
   * @param headers - Optional custom HTTP headers
   * @returns Observable<UserListResponse> - Successful response
   */
  getAllUsersWithPagination(queryParams?: AllUsersWithPaginationQueryParams, headers?: HttpHeaders): Observable<UserListResponse> {
    const url = fillUrl('/users', {}, queryParams || {});
    return this.http.get<UserListResponse>(url, { headers })
      .pipe(
        map(response => UserListResponseSchema.parse(response))
      );
  }

  /**
   * Create New User Account
   *
   * Create a new user account
   *
   * @param dto - Request body of type CreateUserRequest
   * @param headers - Optional custom HTTP headers
   * @returns Observable<User> - User created successfully
   */
  createNewUserAccount(dto: CreateUserRequest, headers?: HttpHeaders): Observable<User> {
    const url = fillUrl('/users', {}, {});
    return this.http.post<User>(url, dto, { headers })
      .pipe(
        map(response => UserSchema.parse(response))
      );
  }

  /**
   * Get User Profile By ID
   *
   * @param userId - Path parameter of type string
   * @param headers - Optional custom HTTP headers
   * @returns Observable<User> - User found
   */
  getUserProfileByID(userId: string, headers?: HttpHeaders): Observable<User> {
    const url = fillUrl('/users/{userId}', { userId: userId }, {});
    return this.http.get<User>(url, { headers })
      .pipe(
        map(response => UserSchema.parse(response))
      );
  }

}

