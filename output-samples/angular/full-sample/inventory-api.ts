// Generated by dtolator --input full-sample.json --zod --angular
// Do not modify manually

import { HttpClient } from "@angular/common/http";
import { Injectable } from "@angular/core";
import { Observable } from "rxjs";
import { map } from "rxjs/operators";
import { z } from "zod";
import { subsToUrl } from "./subs-to-url.func";
import {
  Inventory,
  InventorySchema,
  InventoryResponse,
  InventoryResponseSchema,
  UpdateInventoryRequest,
} from "./dto";

@Injectable({ providedIn: "root" })
export class InventoryApi {
  constructor(private http: HttpClient) {}

  /**
   * Get Inventory Levels
   *
   * @param queryParams - Query parameters object
   * @param queryParams.lowStock - optional parameter of type boolean
   * @returns Observable<InventoryResponse> - Inventory levels
   */
  getInventoryLevels(queryParams?: { lowStock?: boolean }): Observable<InventoryResponse> {
    const url = subsToUrl("/inventory", {}, queryParams || {});
    return this.http.get<InventoryResponse>(url)
      .pipe(
        map(response => InventoryResponseSchema.parse(response))
      );
  }

  /**
   * Update Product Inventory
   *
   * @param productId - Path parameter of type string
   * @param dto - Request body of type UpdateInventoryRequest
   * @returns Observable<Inventory> - Inventory updated
   */
  updateProductInventory(productId: string, dto: UpdateInventoryRequest): Observable<Inventory> {
    const url = subsToUrl("/inventory/{productId}", { productId: productId }, {});
    return this.http.put<Inventory>(url, dto)
      .pipe(
        map(response => InventorySchema.parse(response))
      );
  }

}

