// Generated by dtolator --from-json-schema schema.json --zod --pretty
// Do not modify manually

import { z } from "zod";

export const MetadataPreferencesNotificationsSchema = z.object({
  email: z.boolean(),
  push: z.boolean(),
  sms: z.unknown().nullable()
});

export type MetadataPreferencesNotifications = z.infer<typeof MetadataPreferencesNotificationsSchema>;

export const OrganizationSettingsFeaturesSchema = z.object({
  advancedReporting: z.boolean(),
  apiAccess: z.boolean(),
  customBranding: z.unknown().nullable()
});

export type OrganizationSettingsFeatures = z.infer<typeof OrganizationSettingsFeaturesSchema>;

export const PasswordPolicySchema = z.object({
  minLength: z.number().int(),
  requireNumbers: z.boolean(),
  requireSpecialChars: z.boolean()
});

export type PasswordPolicy = z.infer<typeof PasswordPolicySchema>;

export const RootStatisticsSchema = z.object({
  activeUsers: z.number().int(),
  growth: z.number(),
  totalUsers: z.number().int()
});

export type RootStatistics = z.infer<typeof RootStatisticsSchema>;

export const MetadataPreferencesSchema = z.object({
  language: z.string(),
  notifications: MetadataPreferencesNotificationsSchema,
  theme: z.string()
});

export type MetadataPreferences = z.infer<typeof MetadataPreferencesSchema>;

export const SecuritySchema = z.object({
  passwordPolicy: PasswordPolicySchema,
  twoFactorRequired: z.boolean()
});

export type Security = z.infer<typeof SecuritySchema>;

export const MetadataSchema = z.object({
  createdAt: z.string(),
  lastLogin: z.string(),
  preferences: MetadataPreferencesSchema
});

export type Metadata = z.infer<typeof MetadataSchema>;

export const OrganizationSettingsSchema = z.object({
  features: OrganizationSettingsFeaturesSchema,
  security: SecuritySchema
});

export type OrganizationSettings = z.infer<typeof OrganizationSettingsSchema>;

export const UserSchema = z.object({
  email: z.string(),
  id: z.number().int(),
  metadata: MetadataSchema,
  name: z.string(),
  permissions: z.array(z.string()),
  role: z.string()
});

export type User = z.infer<typeof UserSchema>;

export const OrganizationSchema = z.object({
  industry: z.string(),
  name: z.string(),
  settings: OrganizationSettingsSchema
});

export type Organization = z.infer<typeof OrganizationSchema>;

export const RootSchema = z.object({
  organization: OrganizationSchema,
  statistics: RootStatisticsSchema,
  users: z.array(UserSchema)
});

export type Root = z.infer<typeof RootSchema>;

