// Generated by dtolator --from-openapi full-sample.json --zod --angular
// Do not modify manually

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { z } from 'zod';
import { fillUrl } from './fill-url';
import {
  CreateOrderRequest,
  Order,
  OrderSchema,
  UpdateOrderStatusRequest,
} from './dto';

@Injectable({ providedIn: 'root' })
export class OrdersApi {
  constructor(private http: HttpClient) {}

  /**
   * Create New Order
   *
   * @param dto - Request body of type CreateOrderRequest
   * @returns Observable<Order> - Order created
   */
  createNewOrder(dto: CreateOrderRequest): Observable<Order> {
    const url = fillUrl('/orders', {}, {});
    return this.http.post<Order>(url, dto)
      .pipe(
        map(response => OrderSchema.parse(response))
      );
  }

  /**
   * Get Order By ID
   *
   * @param orderId - Path parameter of type string
   * @returns Observable<Order> - Order found
   */
  getOrderByID(orderId: string): Observable<Order> {
    const url = fillUrl('/orders/{orderId}', { orderId: orderId }, {});
    return this.http.get<Order>(url)
      .pipe(
        map(response => OrderSchema.parse(response))
      );
  }

  /**
   * Update Order Status
   *
   * @param orderId - Path parameter of type string
   * @param dto - Request body of type UpdateOrderStatusRequest
   * @returns Observable<Order> - Order status updated
   */
  updateOrderStatus(orderId: string, dto: UpdateOrderStatusRequest): Observable<Order> {
    const url = fillUrl('/orders/{orderId}', { orderId: orderId }, {});
    return this.http.patch<Order>(url, dto)
      .pipe(
        map(response => OrderSchema.parse(response))
      );
  }

}

