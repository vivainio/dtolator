// Generated by dtolator --from-openapi full-sample.json --zod --angular
// Do not modify manually

import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { z } from 'zod';
import { fillUrl } from './fill-url';
import {
  Product,
  ProductSchema,
  ProductCategory,
  ProductListResponse,
  ProductListResponseSchema,
  SearchProductsWithFiltersQueryParams,
  UpdateProductRequest,
} from './dto';

@Injectable({ providedIn: 'root' })
export class ProductsApi {
  constructor(private http: HttpClient) {}

  /**
   * Search Products With Filters
   *
   * @param queryParams - Query parameters object
   * @param queryParams.category - optional parameter of type ProductCategory
   * @param queryParams.minPrice - optional parameter of type number
   * @param queryParams.maxPrice - optional parameter of type number
   * @param headers - Optional custom HTTP headers
   * @returns Observable<ProductListResponse> - Products list
   */
  searchProductsWithFilters(queryParams?: SearchProductsWithFiltersQueryParams, headers?: HttpHeaders): Observable<ProductListResponse> {
    const url = fillUrl('/products', {}, queryParams || {});
    return this.http.get<ProductListResponse>(url, { headers })
      .pipe(
        map(response => ProductListResponseSchema.parse(response))
      );
  }

  /**
   * Get Product By ID
   *
   * @param productId - Path parameter of type string
   * @param headers - Optional custom HTTP headers
   * @returns Observable<Product> - Product found
   */
  getProductByID(productId: string, headers?: HttpHeaders): Observable<Product> {
    const url = fillUrl('/products/{productId}', { productId: productId }, {});
    return this.http.get<Product>(url, { headers })
      .pipe(
        map(response => ProductSchema.parse(response))
      );
  }

  /**
   * Update Product
   *
   * @param productId - Path parameter of type string
   * @param dto - Request body of type UpdateProductRequest
   * @param headers - Optional custom HTTP headers
   * @returns Observable<Product> - Product updated
   */
  updateProduct(productId: string, dto: UpdateProductRequest, headers?: HttpHeaders): Observable<Product> {
    const url = fillUrl('/products/{productId}', { productId: productId }, {});
    return this.http.put<Product>(url, dto, { headers })
      .pipe(
        map(response => ProductSchema.parse(response))
      );
  }

}

