name: CI

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Check formatting
      run: cargo fmt --check
      
    - name: Run clippy
      run: cargo clippy -- -D clippy::correctness -D clippy::suspicious -A clippy::large_enum_variant -A clippy::type_complexity -A clippy::only_used_in_recursion -A clippy::uninlined_format_args -A dead_code -A unused_variables
    
    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Build
      run: cargo build --verbose
    
    - name: Run unit tests
      run: cargo test --verbose
    
    - name: Build release
      run: cargo build --release
    
    - name: Setup Python for integration tests
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Setup Node.js for TypeScript checking
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install TypeScript
      run: npm install -g typescript
    
    - name: Run integration tests
      run: python test-suite.py --typecheck

  build-release:
    name: Build Release (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    needs: test
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: dtolator-linux-x86_64
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: dtolator-linux-x86_64-musl
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: dtolator-windows-x86_64.exe
          - target: x86_64-apple-darwin
            os: macos-latest
            name: dtolator-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: dtolator-macos-aarch64
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install musl tools
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: sudo apt-get install -y musl-tools
    
    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-cargo-
    
    - name: Build release
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Package binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p dist
        cp target/${{ matrix.target }}/release/dtolator dist/dtolator
        chmod +x dist/dtolator
    
    - name: Package binary (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir dist
        cp target/${{ matrix.target }}/release/dtolator.exe dist/dtolator.exe
    
    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: dist/

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build-release
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Download all artifacts
      uses: actions/download-artifact@v5
      with:
        path: dist
    
    - name: Create release archives
      run: |
        cd dist
        for dir in */; do
          if [ -d "$dir" ]; then
            cd "$dir"
            if [[ "$dir" == *"windows"* ]]; then
              zip -r "../${dir%/}.zip" .
            else
              tar -czf "../${dir%/}.tar.gz" .
            fi
            cd ..
          fi
        done
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*.zip
          dist/*.tar.gz
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 